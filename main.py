import asyncio
from datetime import datetime, timedelta
import logging
import os

from aiogram import Bot, Dispatcher, types, filters
from dateparser import parse
from dotenv import load_dotenv
import requests

load_dotenv()  # –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –∏–∑ .env —Ñ–∞–π–ª–∞

bot = Bot(token=os.getenv('BOT_TOKEN'))  # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
dp = Dispatcher()  # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞


# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async def main():
    logging.basicConfig(level=logging.INFO)
    await dp.start_polling(bot, skip_updates=True)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@dp.message(filters.CommandStart())
async def send_welcome(message: types.Message):
    await message.answer(
        f"–ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}! –Ø –≥–∏–¥—Ä–æ–º–µ—Ç–µ–æ–±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–∂–µ—Ç —Ç–µ–±–µ —É–∑–Ω–∞—Ç—å –ø–æ–≥–æ–¥—É!\n"
        "–ù–∞–ø–∏—à–∏ –≤ —á–∞—Ç /help, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ –æ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è—Ö!")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help
@dp.message(filters.Command("help"))
async def get_help(message: types.Message):
    await message.answer(
        "/weather <–≥–æ—Ä–æ–¥> - –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–≥–æ–¥–µ –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–º –≥–æ—Ä–æ–¥–µ –≤ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç\n"
        "/forecast <–≥–æ—Ä–æ–¥> - –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫—Ä–∞—Ç–∫–∏–π –ø—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã –Ω–∞ –∫–∞–∂–¥—ã–µ 3 —á–∞—Å–∞ –Ω–∞ –±–ª–∏–∂–∞–π—à–∏–µ 5 –¥–Ω–µ–π \n"
        "/weatherattime <–≥–æ—Ä–æ–¥> <–≤—Ä–µ–º—è> - –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–º –≥–æ—Ä–æ–¥–µ –≤ —É–∫–∞–∑–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –≤—Ä–µ–º–µ–Ω–∏"
        ", –Ω–æ –Ω–µ –¥–∞–ª—å—à–µ —á–µ–º –Ω–∞ 5 –¥–Ω–µ–π –≤–ø–µ—Ä–µ–¥"
    )


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /weather, –≤–æ–∑–≤—Ä–∞—â–∞—é—â–µ–π —Ç–µ–∫—É—â–∏–µ –ø–æ–≥–æ–¥–Ω—ã–µ —É—Å–ª–æ–≤–∏—è –≤ —É–∫–∞–∑–∞–Ω–æ–º –≥–æ—Ä–æ–¥–µ
@dp.message(filters.Command("weather"))
async def get_weather(message: types.Message):
    city = message.text.split(maxsplit=1)[1]  # –ü–æ–ª—É—á–µ–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è –≥–æ—Ä–æ–¥–∞
    url = (f"http://api.openweathermap.org/data/2.5/weather?q={city}&appid={os.getenv('OPENWEATHER_API_KEY')}"
           f"&units=metric&lang=ru")  # –û–±—Ä–∞—â–µ–Ω–∏–µ –∫ Weather API
    response = requests.get(url)
    # –í —Å–ª—É—á–∞–µ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è –æ—à–∏–±–æ–∫
    if response.status_code == 200:
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–≥–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏–∑ json —Ñ–∞–π–ª–∞
        data = response.json()
        icon = data['weather'][0]['icon']
        icon_url = f'https://openweathermap.org/img/wn/{icon[0:2]}d@2x.png'
        weather = data['weather'][0]['description']
        temperature = data['main']['temp']
        humidity = data['main']['humidity']
        pressure = data['main']['pressure']
        windspeed = data['wind']['speed']
        # –í—ã–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö –≤–º–µ—Å—Ç–µ —Å –∏–∫–æ–Ω–∫–æ–π
        await message.answer_photo(photo=icon_url,
                                   caption=(f"–ü–æ–≥–æ–¥–∞ –≤ –≥–æ—Ä–æ–¥–µ {city.capitalize()} —Å–µ–π—á–∞—Å: {weather.capitalize()} \n"
                                            f" üå°Ô∏è –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {temperature}¬∞C \n üíß –í–ª–∞–∂–Ω–æ—Å—Ç—å: {humidity}% \n"
                                            f" ‚¨áÔ∏è –î–∞–≤–ª–µ–Ω–∏–µ: {pressure} –º–º.—Ä—Ç.—Å—Ç. \n üí®Ô∏è –°–∫–æ—Ä–æ—Å—Ç—å –≤–µ—Ç—Ä–∞: {windspeed}–º/c")
                                   )

    else:
        await message.answer(
            "–û—à–∏–±–∫–∞: –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –ª–∏ —É–∫–∞–∑–∞–Ω –≥–æ—Ä–æ–¥ –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É.")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /forecast, –≤–æ–∑–≤—Ä–∞—â–∞—é—â–µ–π –ø–æ–≥–æ–¥–Ω—ã–µ —É—Å–ª–æ–≤–∏—è –Ω–∞ –±–ª–∏–∂–∞–π—à–∏–µ 5 –¥–Ω–µ–π
@dp.message(filters.Command("forecast"))
async def get_forecast(message: types.Message):
    city = message.text.split()[1]  # –ü–æ–ª—É—á–µ–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
    url = (f"http://api.openweathermap.org/data/2.5/forecast?q={city}&appid={os.getenv('OPENWEATHER_API_KEY')}"
           f"&units=metric&lang=ru")  # –û–±—Ä–∞—â–µ–Ω–∏–µ –∫ Weather API
    response = requests.get(url)
    # –í —Å–ª—É—á–∞–µ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è –æ—à–∏–±–æ–∫
    if response.status_code == 200:
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–≥–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏–∑ json —Ñ–∞–π–ª–∞
        data = response.json()
        # –°–æ–∑–¥–∞–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –¥–∞–Ω–Ω—ã—Ö, –∫–æ—Ç–æ—Ä—ã–µ –≤—ã–≤–µ–¥—É—Ç—Å—è –≤ –∫–æ–Ω—Ü–µ
        forecast = []
        for item in data['list']:
            time = item['dt_txt']
            weather = item['weather'][0]['description']
            temperature = item['main']['temp']
            forecast.append(f"{time}: {temperature}¬∞C, {weather.capitalize()}")
        # –í—ã–≤–æ–¥ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞ –¥–∞–Ω–Ω—ã—Ö
        await message.answer("\n".join(forecast))
    else:
        await message.answer(
            "–û—à–∏–±–∫–∞: –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –ª–∏ —É–∫–∞–∑–∞–Ω –≥–æ—Ä–æ–¥ –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É.")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /wheatherattime, –≤–æ–∑–≤—Ä–∞—â–∞—é—â–µ–π –ø–æ–≥–æ–¥–Ω—ã–µ —É—Å–ª–æ–≤–∏—è –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–º –≥–æ—Ä–æ–¥–µ –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è
@dp.message(filters.Command("weatherattime"))
async def get_weather_at_time(message: types.Message):
    city = message.text.split(maxsplit=2)[1]  # –ü–æ–ª—É—á–µ–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –∏–∑ –∫–æ–º–∞–Ω–¥—ã
    time = parse(message.text.split(maxsplit=2)[2])  # –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –∏–∑ –∫–æ–º–∞–Ω–¥—ã
    url = (f"http://api.openweathermap.org/data/2.5/forecast?q={city}&appid={os.getenv('OPENWEATHER_API_KEY')}"
           f"&units=metric&lang=ru")  # –û–±—Ä–∞—â–µ–Ω–∏–µ –∫ Weather API
    response = requests.get(url)
    # –í —Å–ª—É—á–∞–µ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è –æ—à–∏–±–æ–∫
    if response.status_code == 200:
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–≥–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏–∑ json —Ñ–∞–π–ª–∞
        data = response.json()
        # –°–∞–º—ã–π –ø–æ–¥—Ö–æ–¥—è—â–∏–π –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –ø—Ä–æ–≥–Ω–æ–∑ (–∏–∑–Ω–∞—á–∞–ª—å–Ω–æ —Ç–∞–∫–æ–≥–æ –Ω–µ—Ç)
        closest_forecast = None
        # –ò–¥–µ–º –ø–æ –º–∞—Å—Å–∏–≤—É –ø—Ä–æ–Ω–æ–∑–æ–≤ –Ω–∞ –∫–∞–∂–¥—ã–µ 3 —á–∞—Å–∞
        for item in data['list']:
            forecast_time = datetime.strptime(item['dt_txt'], '%Y-%m-%d %H:%M:%S')
            time_diff = abs(forecast_time - time)
            # –¢–∞–∫ –∫–∞–∫ –∏–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≥–Ω–æ–∑–∞ 3 —á–∞—Å–∞, —Ç–æ –ø–æ–¥—Ö–æ–¥—è—â–∏–π –ø—Ä–æ–≥–Ω–æ–∑ –±—É–¥–µ—Ç –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ ~90 –º–∏–Ω—É—Ç–∞—Ö –æ—Ç –¥–∞–Ω–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
            if time_diff < timedelta(0, 0, 0, 1, 31, 0, 0):
                closest_forecast = item
        # –ï—Å–ª–∏ –ø–æ–¥—Ö–æ–¥—è—â–∏–π –ø—Ä–æ–≥–Ω–æ–∑ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —É—à–µ–ª –∑–∞ –≤—Ä–µ–º—è –≤ 5 –¥–Ω–µ–π), –≤—ã–≤–µ–¥–µ–º –µ–≥–æ –ø–æ–≥–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        if closest_forecast:
            icon = closest_forecast['weather'][0]['icon']
            icon_url = f'https://openweathermap.org/img/wn/{icon[0:2]}d@2x.png'
            weather = closest_forecast['weather'][0]['description']
            temperature = closest_forecast['main']['temp']
            humidity = closest_forecast['main']['humidity']
            pressure = closest_forecast['main']['pressure']
            windspeed = closest_forecast['wind']['speed']
            # –í—ã–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö –≤–º–µ—Å—Ç–µ —Å –∏–∫–æ–Ω–∫–æ–π
            await message.answer_photo(photo=icon_url,
                                       caption=(
                                           f"–ü–æ–≥–æ–¥–∞ –≤ –≥–æ—Ä–æ–¥–µ {city.capitalize()} {message.text.split(maxsplit=2)[2]}:"
                                           f" {weather.capitalize()} \n"
                                           f" üå°Ô∏è –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {temperature}¬∞C \n üíß –í–ª–∞–∂–Ω–æ—Å—Ç—å: {humidity}% \n"
                                           f" ‚¨áÔ∏è –î–∞–≤–ª–µ–Ω–∏–µ: {pressure} –º–º.—Ä—Ç.—Å—Ç. \n üí®Ô∏è –°–∫–æ—Ä–æ—Å—Ç—å –≤–µ—Ç—Ä–∞: {windspeed}–º/c"))
        # –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –∑–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ä–∞–º–∫–∏
        else:
            await message.answer("–û—à–∏–±–∫–∞: –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–≥–æ–¥–µ –Ω–∞ –¥–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è")
    # –û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–µ–≤–µ—Ä–Ω–æ–º —É–∫–∞–∑–∞–Ω–∏–∏ –≥–æ—Ä–æ–¥–∞
    else:
        await message.answer(
            "–û—à–∏–±–∫–∞: –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –ª–∏ —É–∫–∞–∑–∞–Ω –≥–æ—Ä–æ–¥ –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É.")


# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == '__main__':
    asyncio.run(main())
